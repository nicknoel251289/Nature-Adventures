.button {
    /*pseudo classes are a special state of a selector*/
    /*we want the link/button to have same design as 
    when the link has been visited*/
    &:link,
    &:visited {
        text-transform: uppercase;
        text-decoration: none;
        padding: 1.2rem 3.4rem;
        display: inline-block;
        border-radius: 100px;
        position: relative;
        box-shadow: 0 .1rem .3rem rgba($black,0.12), 0 .1rem .2rem  rgba($black,0.24);
        font-size: 1.6rem;
    }
    &:hover {
        transform: translateY(-.3rem);
        box-shadow: 0 1rem 2rem; /*first argument is X offset, second is Y offset, third is blur*/
        box-shadow: 0 .2rem 1rem rgba($black, 0.404), 0 .1rem .2rem rgba($black,0.24);

        &::after {
            transform: scaleY(1.4) scaleX(1.6);
            opacity: 0;
        }
    }
    /*when clicked on*/
    &:active {
        transform: translateY(-.1rem);
        box-shadow: 0 1px 3px rgba($black,0.12), 0 1px 2px rgba($black,0.24);
    }
    &_white {
        background-color: $white;
        color: $light_gray;

        &::after {
            background-color: $white;
        }
    }
    &::after {
        content: "";
        display: inline-block;
        width: 100%;
        height: 100%;
        border-radius: 10rem;
        position: absolute;
        top: 0;
        left: 0;
        z-index: -1;
        transition-duration: .4s;
    }
    /*
    1. The pseudo element adds a virtual element right 
    after the one that we are selecting.
    2. For the content to appear on the page, you must specify
    its content property. It can be an empty element, but
    it is ALWAYS necessary. Same with the display property.
    3. The pseudo class also acts like a child element, so when
    using width: 100% it will fill it's parent, aka the original 
    element thta is being duplicated.

    we used absolute positioning on the botton, so this would take 
    the child element out of its parents scope and go to the next 
    element that has a position of relative. So we need to make sure 
    that the pseudo element remains inside its parent by giving the 
    parent a relative positioning
    */

    &_animated {
        animation: moveInBottom .5s ease-out .5s;
        animation-fill-mode: backwards; 
        /*Our element was visible before running the animation so...
        The animation-fill-mode property specifies a style for the 
        element when the animation is not playing (before it starts, 
        after it ends, or both).
        https://tympanus.net/codrops/css_reference/animation-fill-mode/*/
    }
}

.button_text {
    padding: 1rem;

    &:link,
    &:visited {
        font-size: $default_font_size;
        color: $primary_color;
        display: inline-block;
        text-decoration: none;
        border-bottom: 1px solid $primary_color;
        padding: 1rem 2rem;
        transition: all .2s;
    }
    &:hover {
        color: $white;
        background-color: $primary_color;
        box-shadow: 0 1rem 2rem rgba($black, .15);
        transform: translateY(-2px);
    }
    &:active {
        box-shadow: 0 1rem 1rem rgba($black, .12);
        transform: translateY(0px);
    }
}